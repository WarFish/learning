Данный файл содержит текст заданий раздела 'Упражнения по программированию' к главе 10: 'Классы
и объектно-ориентированное программирование' книги: Начинаем программировать на Python. 5-е
издание
Автор: Тони Гэддис

*************************************************************************************************

Задача #1: Класс Pet.

Напишите класс Pet (Домашнее животное), который должен иметь приведенные ниже атрибуты данных:
 - __name (для клички домашнего животного);
 - __animal_type (для типа домашнего животного, например это может быть 'собака', 'кот' и '
 птица')
 - __age (для возраста домашнего животного)
Класс Pet должен иметь метод __init__(), который создает эти атрибуты. Он так же должен иметь
приведенные ниже методы:
 - метод set_name() присваивает значение полю __name;
 - метод set_animal_type() присваивает значение полю __animal_type;
 - метод set_age() присваивает значение полю __age;
 - метод get_name() возвращает значение поля __name;
 - метод get_animal_type() возвращает значение поля __animal_type;
 - метод get_age() возвращает значение поля __age;
После написания данного класса напишите программу, которая создает объект класса и предлагает
пользователю ввести ключику, тип и возраст своего домашнего животного. Эти данные должны
храниться в качестве атрибутов объекта. Примените методы-получатели, что бы извлечь имя, тип и
возраст домашнего животного и показать жти данные на экране.

Решение в файле 'task_10_1.py'

*************************************************************************************************

Задача #2: Класс Car.

Напишите класс под названием Car (Легковой автомобиль), который имеет приведенные ниже атрибуты
данных:
 - __year_model (для модели указанного года выпуска);
 - __make (для фирмы-изготовителя автомобиля)
 - __speed (для текущей скорости автомобиля)
Класс Car должен иметь метод __init__(), который в качестве аргументов принимает модель
указанного года выпуска и фирму-изготовителя. Эти значения должны быть присвоены атрибутам
__year_model и __make объекта. Он так же должен присвоить 0 атрибуту данных __speed.
Этот класс так же должен иметь методы:
 - метод accelerate() (ускориться) при каждом его вызове должен прибавляться 5 в атрибут данных
 __speed.
 - метод break() (тормозить) при каждом его вызове должен прибавляться 5 в атрибут данных
 __speed.
 - метод get_speed() (получить скорость) должен возвращать текущую скорость.
Далее разработайте программу, которая создает объект Car и пятикратно вызывает метод
accelerate(). После каждого вызова метода accelerate() она должна получить текущую скорость
автомобиля и выводить ее на экран. Затем она должна пятикратно вызвать метод break(). После
каждого вызова метода break() она должна получить текущую скорость автомобиля и выводить ее на
экран.

Решение в файле 'task_10_2.py'

*************************************************************************************************

Задача #3: Класс персональных данных Information.

Разработайте класс, который содержит следующее персональные данные: имя, адрес, возраст и
телефонный номер. Напишите соответствующие методы-получатели и методы-мутаторы. Кроме того,
напишите программу которая создает три экземпляра класса. Один экземпляр должен содержать
информацию о вас, а два других - информацию о ваших друзьях или членах семьи.

Решение в файле 'task_10_3.py'

*************************************************************************************************

Задача #4: Класс Employee.

Напишите класс под названием Employee, который в атрибутах содержит данные о сотруднике: имя,
идентификационный номер, отдел и должность. После написания данного класса напишите программу,
которая создает три объекта Employee с приведенными в таблице 'dop/tab_10_4.png' данными.
Программа должна сохранить эти данные в трех объектах и затем вывести данные по каждому
сотруднику на экран.

Решение в файле 'task_10_4.py'

*************************************************************************************************

Задача #5: Класс RetailItem.

Напишите класс под названием RetailItem (Розничная товарная единица), который содержит данные о
товаре в розничном магазине. Этот класс должен хранить данные в атрибутах: Описание товара,
количество единиц на складе и цена. После написания этого класса напишите программу, которая
создает три объекта RetailItem и сохраняет в них приведенные в таблице данные. 'dop/tab_10_5.png'

Решение в файле 'task_10_5.py'

*************************************************************************************************

Задача #6: Расходы на лечение.

Напишите класс под названием Patient (Пациент), который имеет атрибуты для приведенных ниже
данных:
 - имя, отчество и фамилия;
 - адрес, город, область и почтовый индекс;
 - телефонный номер;
 - имя и телефон контактного лица для экстренной связи.
Метод __init__() класса Patient должны принимать аргументы для каждого атрибута. Класс Patient
также должен для каждого атрибута иметь методы-получатели и методы-мутаторы.
Зачтем напишите класс Procedure, который представляет пройденную пациентом медицинская процедура.
Класс Procedure должен иметь атрибуты для приведенных ниже данных:
 - название процедуры;
 - дата процедуры;
 - имя врача, который выполнял процедуру;
 - стоимость процедуры;
Метод __init__() класса Procedure должен принимать аргумент для каждого аргумента. Класс
Procedure так же должен для каждого атрибута иметь методы-получатели и методы-мутаторы. Далее
напишите программу, которая создает экземпляр класса Patient, инициализированного
демонстрационными данными. Затем создайте три экземпляра класса Procedure, инициализированного
приведенными в таблице 'dop/tab_10_6.png' данными.
Программа должна вывести на экран информацию о пациенте, сведения обо всех трех процедурах и об
общей стоимости всех процедур.

Решение в файле 'task_10_6.py'

*************************************************************************************************

Задача #7: Система управления персоналом.

Это упражнение предполагает создание класса из упражнения 4 по программированию. Создайте
программу, которая сохраняет объекты Employee в словаре. Используйте идентификационный номер
сотрудника в качестве ключа. Программа должна вывести меню, которое позволяет пользователю:
 - найти сотрудника в словаре;
 - добавить сотрудника в словарь;
 - изменить имя, отдел и должность существующего сотрудника в словаре;
 - удалить сотрудника;
 - выйти из программы.
По завершении работы программа должна законсервировать словарь и сохранить его в файле. При
каждом запуске программы она должна попытаться загрузить законсервированный словарь из файла.
Если файл не существует, то программа должна начать работу с пустого словаря.

Решение в файле 'task_10_7.py'

*************************************************************************************************

Задача #8: Класс CashRegister.

Это упражнение предполагает создание класса RetailItem из упражнения 5 по программированию.
Создайте класс CashRegister (Кассовый аппарат), который может использоваться вместе с классом
RetailItem. Класс CashRegister должен иметь внутренний список объектов RetailItem, а так же
приведенные ниже методы.
 - Метод purchase_item() (приобрести товар) в качестве аргумента принимает объект RetailItem. При
 каждом вызове метода purchase_item() объект RetailItem, переданный в качестве аргумента, должен
 быть добавлен в список.
 - Метод get_total() (получить сумму покупки) возвращает общую стоимость всех объектов RetailItem
 хранящихся во внутреннем списке объектов CashRegister.
 Метод clear() (очистить) должен очистить внутренний список объекта CashRegister.
Продемонстрируйте класс CashRegister в программе, которая позволяет пользователю выбрать
несколько товаров для покупки. Когда пользователь готов рассчитаться за покупку, программа должна
вывести список всех товаров, которые он выбрал для покупки, а так же их общую стоимость.

Решение в файле 'task_10_8.py'

*************************************************************************************************

Задача #9: Викторина.

В этой задаче по программированию следует создать простую викторину для двух игроков. Программа
будет работать следующим образом.
 - Начиная с игрока 1, каждый игрок по очереди отвечает на 5 вопросов викторины. (Должно быть в
 общей сложности 10 вопросов.) При выводе вопроса на экран так же выводится 4 возможных ответе.
 Только один из этих ответов является правильным, и если игрок выбирает правильный ответ, то он
 зарабатывает очко.
 - После того как были выбраны все ответы на все вопросы, программа должна показать количество
 очков, заработанное каждым игроком, и объявляет игрока с наибольшим количеством очков
 победителем.
Для создания этой программы напишите класс Question (Вопрос), который будет содержать данные о
вопросе викторины. Класс Question должен иметь атрибуты для приведенных ниже данных:
 - Вопрос викторины;
 - возможный ответ 1;
 - возможный ответ 2;
 - возможный ответ 3;
 - возможный ответ 4;
 - номер правильного ответа (1, 2, 3 или 4).
Класс Question также должен иметь соответствующий метод __init__(), методы-получатели и методы-
мутаторы.
Программа должна содержать список или словарь с 10 объектами Question, один для каждого вопроса
викторины. Состаьте для объектов собственные вопросы викторины по теме или темам по вашему
выбору.

Решение в файле 'task_10_9.py'

*************************************************************************************************