Данный файл содержит все задания из 9 главы книги:
Начинаем программировать на Python. 5-е издание
Автор: Тони Гэддис

*************************************************************************************************

Задача #1
Информация об учебных курсах.
Напишите программу, которая создает словарь, содержащий номера курсов и номера аудиторий, где
проводятся курсы. Словарь должен иметь приведенные в таблице 9.2 (dop/tab_9_2.png) пары
"ключ : значения"
Программа должна так же создавать словарь, содержащий номера курсов и имена преподавателей,
которые ведут каждый курс. Словарь должен иметь привденные в таблице 9.3 (dop/tab_9_3.png) пары
"ключ : значения"
Программа так же должна создать словарь, содержащий номера курсов и время проведения каждого
курса. Словарь должен иметь приведенные в баблице 9.4 (dop/tab_9_4.png) пары "ключ : значения"
Программа должна позволить пользователю, ввести номер курса, а затем показать номер аудитории,
имя преподавателя и время проведения курса.

Решение в файле task_9_1.py

*************************************************************************************************

Задача #2
Викторина со столицами.
Напишите программу, которая создает словарь, содержащий в качестве ключей названия американских
штатов и в качестве значений - их столицы. Затем программа должна провести викторину, случайным
образом вывоводя название штата и прдлагая ввести столицу. Программа должна провести подсчет
количества правильных и неправильных ответов.

Решение в файле task_9_2.py

*************************************************************************************************

Задача #3
Шифрование и дешифрование файлов.
Напишите программу, которая применяет ловарь для присвоения 'кодов' каждой букве алфавита.
Например: codes = {'A': '%', 'a': '9', 'Б': '@', 'б': '#', ...}
Программа должна открыть заданный файл, прочитать его содержимое и примень словарь для записи
зашифрованной версии содержимого файла во второй файл. Каждый символ во втором файле должен
содержать код для соотвествующего символа из первого файла.
Напишите вторую программу, которая открывает зашифрованный файл и показывает его дешифрованное
содержимое на экран.

Решение в файле task_9_3.py

*************************************************************************************************

Задача #4
Уникальные слова.
Напишите программу, которая открывает заданный текстовый файл и затем показывает список всех
уникальных слов в файле.

Решение в файле task_9_4.py

*************************************************************************************************

Задача #5
Частота слов.
Напишите программу, которая считывает содержимое текстового файла. Она должна создать словарь, в
котором ключами будут являться отдельные слова в файле, а значениями - количество появлений
каждго слова. Например, ели слово 'это' появилилось 128 раз, то словарь должен содержать элемент
'это' и значение 123. Программа должна либо показать частотность каждого слова, либо создать
второй файл, содержащий список слов и их частоту.

Решение в файле task_9_5.py

*************************************************************************************************

Задача #6
Анализ файлов.
Напишите программу, которая читает содержимое двух текстовых файлов и сравнивает их следующим
образом:
 - Показывает список всех уникальных слов, содержащихся обоими файлами
 - показывает список слов, входящих в оба файла
 - показывает список слов из первого файла, не входящих во второй
 - показывает список слов из второго файла, не входящих в первый файл
 - показывает список слов, входящих либо в первый либо во второй файл, но не входщих в оба файла
 одновременно

Решение в файле task_9_6.py

*************************************************************************************************

Задача #7
Победители мировой серии.
Файл WorldSeriesWinners.txt, содержит хронологический список команд-победителей мировой серии по
бейсболу с 1903 по 2009 год. Первая строка в файле является названием команды, которая победила
в 1903 году, последняя строка - называнием команды, которая победила в 2009 году. Обратите
внимание, что Мировая серия не проводилась в 1904 и 1994 годах.
Напишите программу, которая читает этот файл и создает словарь, в котором ключи - это названия
команд, а связанные с ними значения - количество побед команды в Мировой серии. Программа также
должна создать словарь, в котором ключи это годы, а связанные с ними значения - названия команд,
которые побеждали в этом году.
Программа должна предложить пользователю ввести год в диапазоне между 1903 и 2009 годами и
вывести название команды, которая выиграла Мировую серию в том году и количество побед в Мировой
серии.

Решение в файле task_9_7.py

*************************************************************************************************

Задача #8
Имена и адреса электронной почты.
Напишите программу, которая сохраняет имена и адреса электронной почты в словаре в виде пары
"Ключ : Значение". Программа должна вывести меню, которое позволяет пользователю отыскать адрес
электронной почты человека, добавить новое имя и адрес электронной почты, изменить существующий
адрес электронной почты и удалить существующее имя и адрес электронной почты. Программа должна
законсервировать словарь и сохранить его в файл при выходе пользователя из программы. При каждом
запуске программа должна извлекать словарь из файла и расконсервировать его.

Решение в файле task_9_8.py

*************************************************************************************************

Задача #9
Имитация игры в блек-джек.
Напишите программу которая имитирует упрощенную версию игры в блек-джек между двумя виртуальными
игроками. Карты имеют приведенные ниже значения
 - Числовым картам присваивается значение, которое на них напечатано. Например, значение двойки
 пик равняется 2, значение пятерки бубей равняется 5.
 - Валетам, дамам и королям присваивается значение 10.
 - Тузам присвоено значение 1 или 11 в зависимости от выбора игрока.
Программа должна раздавать карты каждому игроку до тех пор, пока карты на руках одного из
игроков не превысят 21 очко. Когда это происходит, другой игрок становится победителем. (Может
возникнуть ситуация, когда карты на руках у обоих персонажей превысят 21 очко, в этом случае
победителя нет.) Программа должна повторяться до тех пор, пока все карты не будут розданы.
Если игроку сдан туз, то программа должна определить значение этой карты согласно следующему
правилу: туз равняется 11 очкам, если в результате добавления этой карты стомость комбинации
карт на руках у игрока не превысит 21 очко. В противном случае туз равняется 1 очку.

Решение в файле task_9_9.py

*************************************************************************************************